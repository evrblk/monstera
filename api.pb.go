// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v6.32.0
// source: api.proto

package monstera

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftState int32

const (
	RaftState_RAFT_STATE_INVALID   RaftState = 0
	RaftState_RAFT_STATE_FOLLOWER  RaftState = 1
	RaftState_RAFT_STATE_LEADER    RaftState = 2
	RaftState_RAFT_STATE_CANDIDATE RaftState = 3
	RaftState_RAFT_STATE_SHUTDOWN  RaftState = 4
)

// Enum value maps for RaftState.
var (
	RaftState_name = map[int32]string{
		0: "RAFT_STATE_INVALID",
		1: "RAFT_STATE_FOLLOWER",
		2: "RAFT_STATE_LEADER",
		3: "RAFT_STATE_CANDIDATE",
		4: "RAFT_STATE_SHUTDOWN",
	}
	RaftState_value = map[string]int32{
		"RAFT_STATE_INVALID":   0,
		"RAFT_STATE_FOLLOWER":  1,
		"RAFT_STATE_LEADER":    2,
		"RAFT_STATE_CANDIDATE": 3,
		"RAFT_STATE_SHUTDOWN":  4,
	}
)

func (x RaftState) Enum() *RaftState {
	p := new(RaftState)
	*p = x
	return p
}

func (x RaftState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaftState) Descriptor() protoreflect.EnumDescriptor {
	return file_api_proto_enumTypes[0].Descriptor()
}

func (RaftState) Type() protoreflect.EnumType {
	return &file_api_proto_enumTypes[0]
}

func (x RaftState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaftState.Descriptor instead.
func (RaftState) EnumDescriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

type UpdateRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Payload         []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	ShardKey        []byte                 `protobuf:"bytes,2,opt,name=shard_key,json=shardKey,proto3" json:"shard_key,omitempty"`
	ApplicationName string                 `protobuf:"bytes,3,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	KeyspaceName    string                 `protobuf:"bytes,4,opt,name=keyspace_name,json=keyspaceName,proto3" json:"keyspace_name,omitempty"`
	ShardId         string                 `protobuf:"bytes,5,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId       string                 `protobuf:"bytes,6,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Hops            int32                  `protobuf:"varint,8,opt,name=hops,proto3" json:"hops,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *UpdateRequest) GetShardKey() []byte {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *UpdateRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *UpdateRequest) GetKeyspaceName() string {
	if x != nil {
		return x.KeyspaceName
	}
	return ""
}

func (x *UpdateRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *UpdateRequest) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *UpdateRequest) GetHops() int32 {
	if x != nil {
		return x.Hops
	}
	return 0
}

type UpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ReadRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Payload                []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	AllowReadFromFollowers bool                   `protobuf:"varint,2,opt,name=allow_read_from_followers,json=allowReadFromFollowers,proto3" json:"allow_read_from_followers,omitempty"`
	ShardKey               []byte                 `protobuf:"bytes,3,opt,name=shard_key,json=shardKey,proto3" json:"shard_key,omitempty"`
	ApplicationName        string                 `protobuf:"bytes,4,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	KeyspaceName           string                 `protobuf:"bytes,5,opt,name=keyspace_name,json=keyspaceName,proto3" json:"keyspace_name,omitempty"`
	ShardId                string                 `protobuf:"bytes,6,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	ReplicaId              string                 `protobuf:"bytes,7,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Hops                   int32                  `protobuf:"varint,8,opt,name=hops,proto3" json:"hops,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ReadRequest) Reset() {
	*x = ReadRequest{}
	mi := &file_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequest) ProtoMessage() {}

func (x *ReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequest.ProtoReflect.Descriptor instead.
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{2}
}

func (x *ReadRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ReadRequest) GetAllowReadFromFollowers() bool {
	if x != nil {
		return x.AllowReadFromFollowers
	}
	return false
}

func (x *ReadRequest) GetShardKey() []byte {
	if x != nil {
		return x.ShardKey
	}
	return nil
}

func (x *ReadRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ReadRequest) GetKeyspaceName() string {
	if x != nil {
		return x.KeyspaceName
	}
	return ""
}

func (x *ReadRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *ReadRequest) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *ReadRequest) GetHops() int32 {
	if x != nil {
		return x.Hops
	}
	return 0
}

type ReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadResponse) Reset() {
	*x = ReadResponse{}
	mi := &file_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponse) ProtoMessage() {}

func (x *ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponse.ProtoReflect.Descriptor instead.
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{3}
}

func (x *ReadResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	mi := &file_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{4}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replicas      []*ReplicaState        `protobuf:"bytes,1,rep,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{5}
}

func (x *HealthCheckResponse) GetReplicas() []*ReplicaState {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type TriggerSnapshotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplicaId     string                 `protobuf:"bytes,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerSnapshotRequest) Reset() {
	*x = TriggerSnapshotRequest{}
	mi := &file_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSnapshotRequest) ProtoMessage() {}

func (x *TriggerSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSnapshotRequest.ProtoReflect.Descriptor instead.
func (*TriggerSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{6}
}

func (x *TriggerSnapshotRequest) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

type TriggerSnapshotResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerSnapshotResponse) Reset() {
	*x = TriggerSnapshotResponse{}
	mi := &file_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSnapshotResponse) ProtoMessage() {}

func (x *TriggerSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSnapshotResponse.ProtoReflect.Descriptor instead.
func (*TriggerSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{7}
}

type LeadershipTransferRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplicaId     string                 `protobuf:"bytes,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeadershipTransferRequest) Reset() {
	*x = LeadershipTransferRequest{}
	mi := &file_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeadershipTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadershipTransferRequest) ProtoMessage() {}

func (x *LeadershipTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadershipTransferRequest.ProtoReflect.Descriptor instead.
func (*LeadershipTransferRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{8}
}

func (x *LeadershipTransferRequest) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

type LeadershipTransferResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeadershipTransferResponse) Reset() {
	*x = LeadershipTransferResponse{}
	mi := &file_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeadershipTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadershipTransferResponse) ProtoMessage() {}

func (x *LeadershipTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadershipTransferResponse.ProtoReflect.Descriptor instead.
func (*LeadershipTransferResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{9}
}

type AddVoterRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ReplicaId      string                 `protobuf:"bytes,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	VoterReplicaId string                 `protobuf:"bytes,2,opt,name=voter_replica_id,json=voterReplicaId,proto3" json:"voter_replica_id,omitempty"`
	VoterAddress   string                 `protobuf:"bytes,3,opt,name=voter_address,json=voterAddress,proto3" json:"voter_address,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AddVoterRequest) Reset() {
	*x = AddVoterRequest{}
	mi := &file_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVoterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVoterRequest) ProtoMessage() {}

func (x *AddVoterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVoterRequest.ProtoReflect.Descriptor instead.
func (*AddVoterRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{10}
}

func (x *AddVoterRequest) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *AddVoterRequest) GetVoterReplicaId() string {
	if x != nil {
		return x.VoterReplicaId
	}
	return ""
}

func (x *AddVoterRequest) GetVoterAddress() string {
	if x != nil {
		return x.VoterAddress
	}
	return ""
}

type AddVoterResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddVoterResponse) Reset() {
	*x = AddVoterResponse{}
	mi := &file_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddVoterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVoterResponse) ProtoMessage() {}

func (x *AddVoterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVoterResponse.ProtoReflect.Descriptor instead.
func (*AddVoterResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{11}
}

type ReplicaState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReplicaId     string                 `protobuf:"bytes,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	RaftState     RaftState              `protobuf:"varint,2,opt,name=raft_state,json=raftState,proto3,enum=com.evrblk.monstera.RaftState" json:"raft_state,omitempty"`
	RaftStats     map[string]string      `protobuf:"bytes,3,rep,name=raft_stats,json=raftStats,proto3" json:"raft_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Snapshots     []*RaftSnapshot        `protobuf:"bytes,4,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicaState) Reset() {
	*x = ReplicaState{}
	mi := &file_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicaState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaState) ProtoMessage() {}

func (x *ReplicaState) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaState.ProtoReflect.Descriptor instead.
func (*ReplicaState) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{12}
}

func (x *ReplicaState) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *ReplicaState) GetRaftState() RaftState {
	if x != nil {
		return x.RaftState
	}
	return RaftState_RAFT_STATE_INVALID
}

func (x *ReplicaState) GetRaftStats() map[string]string {
	if x != nil {
		return x.RaftStats
	}
	return nil
}

func (x *ReplicaState) GetSnapshots() []*RaftSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type RaftSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index         uint64                 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Term          uint64                 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftSnapshot) Reset() {
	*x = RaftSnapshot{}
	mi := &file_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftSnapshot) ProtoMessage() {}

func (x *RaftSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftSnapshot.ProtoReflect.Descriptor instead.
func (*RaftSnapshot) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{13}
}

func (x *RaftSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RaftSnapshot) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RaftSnapshot) GetTerm() uint64 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *RaftSnapshot) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type UpdateClusterConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *ClusterConfig         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterConfigRequest) Reset() {
	*x = UpdateClusterConfigRequest{}
	mi := &file_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterConfigRequest) ProtoMessage() {}

func (x *UpdateClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateClusterConfigRequest) GetConfig() *ClusterConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateClusterConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterConfigResponse) Reset() {
	*x = UpdateClusterConfigResponse{}
	mi := &file_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterConfigResponse) ProtoMessage() {}

func (x *UpdateClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_rawDescGZIP(), []int{15}
}

var File_api_proto protoreflect.FileDescriptor

var file_api_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x1a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x9d, 0x02,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x28, 0x0a,
	0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a,
	0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72,
	0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x22, 0x37, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x19, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7f, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x2e, 0x52, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x61, 0x66, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x61, 0x66,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e,
	0x52, 0x61, 0x66, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0c, 0x52, 0x61, 0x66, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1d, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x86, 0x01, 0x0a,
	0x09, 0x52, 0x61, 0x66, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x41,
	0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x04, 0x32, 0xec, 0x09, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x61, 0x41, 0x70, 0x69, 0x12, 0x53, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x04, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c,
	0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x15, 0x41, 0x70, 0x70,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e,
	0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x68, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x2e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x77, 0x12, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72,
	0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b,
	0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4e, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70,
	0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d,
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73,
	0x74, 0x65, 0x72, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x62, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a,
	0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74,
	0x65, 0x72, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x08, 0x41, 0x64, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e,
	0x41, 0x64, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2e, 0x6d, 0x6f,
	0x6e, 0x73, 0x74, 0x65, 0x72, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x72, 0x62, 0x6c, 0x6b, 0x2f, 0x6d, 0x6f, 0x6e, 0x73, 0x74, 0x65,
	0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_proto_rawDescOnce sync.Once
	file_api_proto_rawDescData = file_api_proto_rawDesc
)

func file_api_proto_rawDescGZIP() []byte {
	file_api_proto_rawDescOnce.Do(func() {
		file_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_proto_rawDescData)
	})
	return file_api_proto_rawDescData
}

var file_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_proto_goTypes = []any{
	(RaftState)(0),                      // 0: com.evrblk.monstera.RaftState
	(*UpdateRequest)(nil),               // 1: com.evrblk.monstera.UpdateRequest
	(*UpdateResponse)(nil),              // 2: com.evrblk.monstera.UpdateResponse
	(*ReadRequest)(nil),                 // 3: com.evrblk.monstera.ReadRequest
	(*ReadResponse)(nil),                // 4: com.evrblk.monstera.ReadResponse
	(*HealthCheckRequest)(nil),          // 5: com.evrblk.monstera.HealthCheckRequest
	(*HealthCheckResponse)(nil),         // 6: com.evrblk.monstera.HealthCheckResponse
	(*TriggerSnapshotRequest)(nil),      // 7: com.evrblk.monstera.TriggerSnapshotRequest
	(*TriggerSnapshotResponse)(nil),     // 8: com.evrblk.monstera.TriggerSnapshotResponse
	(*LeadershipTransferRequest)(nil),   // 9: com.evrblk.monstera.LeadershipTransferRequest
	(*LeadershipTransferResponse)(nil),  // 10: com.evrblk.monstera.LeadershipTransferResponse
	(*AddVoterRequest)(nil),             // 11: com.evrblk.monstera.AddVoterRequest
	(*AddVoterResponse)(nil),            // 12: com.evrblk.monstera.AddVoterResponse
	(*ReplicaState)(nil),                // 13: com.evrblk.monstera.ReplicaState
	(*RaftSnapshot)(nil),                // 14: com.evrblk.monstera.RaftSnapshot
	(*UpdateClusterConfigRequest)(nil),  // 15: com.evrblk.monstera.UpdateClusterConfigRequest
	(*UpdateClusterConfigResponse)(nil), // 16: com.evrblk.monstera.UpdateClusterConfigResponse
	nil,                                 // 17: com.evrblk.monstera.ReplicaState.RaftStatsEntry
	(*ClusterConfig)(nil),               // 18: com.evrblk.monstera.ClusterConfig
	(*AppendEntriesRequest)(nil),        // 19: com.evrblk.monstera.AppendEntriesRequest
	(*RequestVoteRequest)(nil),          // 20: com.evrblk.monstera.RequestVoteRequest
	(*TimeoutNowRequest)(nil),           // 21: com.evrblk.monstera.TimeoutNowRequest
	(*InstallSnapshotRequest)(nil),      // 22: com.evrblk.monstera.InstallSnapshotRequest
	(*AppendEntriesResponse)(nil),       // 23: com.evrblk.monstera.AppendEntriesResponse
	(*RequestVoteResponse)(nil),         // 24: com.evrblk.monstera.RequestVoteResponse
	(*TimeoutNowResponse)(nil),          // 25: com.evrblk.monstera.TimeoutNowResponse
	(*InstallSnapshotResponse)(nil),     // 26: com.evrblk.monstera.InstallSnapshotResponse
}
var file_api_proto_depIdxs = []int32{
	13, // 0: com.evrblk.monstera.HealthCheckResponse.replicas:type_name -> com.evrblk.monstera.ReplicaState
	0,  // 1: com.evrblk.monstera.ReplicaState.raft_state:type_name -> com.evrblk.monstera.RaftState
	17, // 2: com.evrblk.monstera.ReplicaState.raft_stats:type_name -> com.evrblk.monstera.ReplicaState.RaftStatsEntry
	14, // 3: com.evrblk.monstera.ReplicaState.snapshots:type_name -> com.evrblk.monstera.RaftSnapshot
	18, // 4: com.evrblk.monstera.UpdateClusterConfigRequest.config:type_name -> com.evrblk.monstera.ClusterConfig
	1,  // 5: com.evrblk.monstera.MonsteraApi.Update:input_type -> com.evrblk.monstera.UpdateRequest
	3,  // 6: com.evrblk.monstera.MonsteraApi.Read:input_type -> com.evrblk.monstera.ReadRequest
	19, // 7: com.evrblk.monstera.MonsteraApi.AppendEntriesPipeline:input_type -> com.evrblk.monstera.AppendEntriesRequest
	19, // 8: com.evrblk.monstera.MonsteraApi.AppendEntries:input_type -> com.evrblk.monstera.AppendEntriesRequest
	20, // 9: com.evrblk.monstera.MonsteraApi.RequestVote:input_type -> com.evrblk.monstera.RequestVoteRequest
	21, // 10: com.evrblk.monstera.MonsteraApi.TimeoutNow:input_type -> com.evrblk.monstera.TimeoutNowRequest
	22, // 11: com.evrblk.monstera.MonsteraApi.InstallSnapshot:input_type -> com.evrblk.monstera.InstallSnapshotRequest
	5,  // 12: com.evrblk.monstera.MonsteraApi.HealthCheck:input_type -> com.evrblk.monstera.HealthCheckRequest
	9,  // 13: com.evrblk.monstera.MonsteraApi.LeadershipTransfer:input_type -> com.evrblk.monstera.LeadershipTransferRequest
	7,  // 14: com.evrblk.monstera.MonsteraApi.TriggerSnapshot:input_type -> com.evrblk.monstera.TriggerSnapshotRequest
	11, // 15: com.evrblk.monstera.MonsteraApi.AddVoter:input_type -> com.evrblk.monstera.AddVoterRequest
	15, // 16: com.evrblk.monstera.MonsteraApi.UpdateClusterConfig:input_type -> com.evrblk.monstera.UpdateClusterConfigRequest
	2,  // 17: com.evrblk.monstera.MonsteraApi.Update:output_type -> com.evrblk.monstera.UpdateResponse
	4,  // 18: com.evrblk.monstera.MonsteraApi.Read:output_type -> com.evrblk.monstera.ReadResponse
	23, // 19: com.evrblk.monstera.MonsteraApi.AppendEntriesPipeline:output_type -> com.evrblk.monstera.AppendEntriesResponse
	23, // 20: com.evrblk.monstera.MonsteraApi.AppendEntries:output_type -> com.evrblk.monstera.AppendEntriesResponse
	24, // 21: com.evrblk.monstera.MonsteraApi.RequestVote:output_type -> com.evrblk.monstera.RequestVoteResponse
	25, // 22: com.evrblk.monstera.MonsteraApi.TimeoutNow:output_type -> com.evrblk.monstera.TimeoutNowResponse
	26, // 23: com.evrblk.monstera.MonsteraApi.InstallSnapshot:output_type -> com.evrblk.monstera.InstallSnapshotResponse
	6,  // 24: com.evrblk.monstera.MonsteraApi.HealthCheck:output_type -> com.evrblk.monstera.HealthCheckResponse
	10, // 25: com.evrblk.monstera.MonsteraApi.LeadershipTransfer:output_type -> com.evrblk.monstera.LeadershipTransferResponse
	8,  // 26: com.evrblk.monstera.MonsteraApi.TriggerSnapshot:output_type -> com.evrblk.monstera.TriggerSnapshotResponse
	12, // 27: com.evrblk.monstera.MonsteraApi.AddVoter:output_type -> com.evrblk.monstera.AddVoterResponse
	16, // 28: com.evrblk.monstera.MonsteraApi.UpdateClusterConfig:output_type -> com.evrblk.monstera.UpdateClusterConfigResponse
	17, // [17:29] is the sub-list for method output_type
	5,  // [5:17] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_api_proto_init() }
func file_api_proto_init() {
	if File_api_proto != nil {
		return
	}
	file_raft_proto_init()
	file_config_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_goTypes,
		DependencyIndexes: file_api_proto_depIdxs,
		EnumInfos:         file_api_proto_enumTypes,
		MessageInfos:      file_api_proto_msgTypes,
	}.Build()
	File_api_proto = out.File
	file_api_proto_rawDesc = nil
	file_api_proto_goTypes = nil
	file_api_proto_depIdxs = nil
}
