package codegen

import (
	"fmt"

	. "github.com/dave/jennifer/jen"
)

func GenerateAdapters(monsteraYaml *MonsteraYaml) string {
	f := NewFilePath(monsteraYaml.GoCode.OutputPackage)
	f.HeaderComment("Code generated by `monstera generate`. DO NOT EDIT.")
	f.ImportAlias("github.com/evrblk/monstera/x", "monsterax")

	// Core metrics
	f.Var().Id("monsteraCoreMethodDuration").Op("=").Qual("github.com/prometheus/client_golang/prometheus", "NewHistogramVec").Call(
		Qual("github.com/prometheus/client_golang/prometheus", "HistogramOpts").Values(Dict{
			Id("Name"):                            Lit("monstera_core_method_duration_seconds"),
			Id("Help"):                            Lit("Monstera core method duration"),
			Id("NativeHistogramBucketFactor"):     Lit(1.1),
			Id("NativeHistogramMaxBucketNumber"):  Lit(100),
			Id("NativeHistogramMinResetDuration"): Qual("time", "Hour"),
		},
		),
		Op("[]").String().Values(Lit("core"), Lit("method"), Lit("shard"), Lit("replica")),
	)
	f.Line()

	for _, core := range monsteraYaml.Cores {
		generateAdapter(f, core, monsteraYaml)
	}

	return fmt.Sprintf("%#v", f)
}

func generateAdapter(f *File, core *MonsteraCore, monsteraYaml *MonsteraYaml) {
	adapterName := core.Name + "CoreAdapter"
	apiName := core.Name + "CoreApi"
	coreVarName := firstCharToLower(core.Name) + "Core"
	f.Type().Id(adapterName).Struct(
		Id("shardId").String(),
		Id("replicaId").String(),
		Line(),
		Id(coreVarName).Qual(monsteraYaml.GoCode.OutputPackage, apiName),
	)

	// ApplicationCore interface var
	f.Var().Id("_").Qual("github.com/evrblk/monstera", "ApplicationCore").Op("=").Op("&").Id(adapterName).Values()

	// NewAdapter func
	f.Func().Id(
		"New"+adapterName,
	).Params(
		Id("shardId").String(),
		Id("replicaId").String(),
		Id(coreVarName).Qual(monsteraYaml.GoCode.OutputPackage, apiName),
	).Params(
		Op("*").Id(adapterName),
	).Block(
		Return(Op("&").Id(adapterName).Values(Dict{
			Id("shardId"):   Id("shardId"),
			Id("replicaId"): Id("replicaId"),
			Id(coreVarName): Id(coreVarName),
		})),
	)
	f.Line()

	// Snapshot func
	f.Func().Params(
		Id("a").Op("*").Id(adapterName),
	).Id("Snapshot").Params().Params(
		Qual("github.com/evrblk/monstera", "ApplicationCoreSnapshot"),
	).Block(
		Defer().Qual("github.com/evrblk/monstera/x", "MeasureSince").Call(
			Id("monsteraCoreMethodDuration").Dot("WithLabelValues").Call(
				Lit(core.Name),
				Lit("Snapshot"),
				Id("a").Dot("shardId"),
				Id("a").Dot("replicaId"),
			),
			Qual("time", "Now").Call(),
		),
		Line(),
		Return(Id("a").Dot(coreVarName).Dot("Snapshot").Call()),
	)
	f.Line()

	// Restore func
	f.Func().Params(
		Id("a").Op("*").Id(adapterName),
	).Id("Restore").Params(
		Id("r").Qual("io", "ReadCloser"),
	).Params(
		Error(),
	).Block(
		Defer().Qual("github.com/evrblk/monstera/x", "MeasureSince").Call(
			Id("monsteraCoreMethodDuration").Dot("WithLabelValues").Call(
				Lit(core.Name),
				Lit("Restore"),
				Id("a").Dot("shardId"),
				Id("a").Dot("replicaId"),
			),
			Qual("time", "Now").Call(),
		),
		Line(),
		Return(Id("a").Dot(coreVarName).Dot("Restore").Call(Id("r"))),
	)
	f.Line()

	// Close func
	f.Func().Params(
		Id("a").Op("*").Id(adapterName),
	).Id("Close").Params().Block(
		Id("a").Dot(coreVarName).Dot("Close").Call(),
	)
	f.Line()

	// Update func
	f.Func().Params(
		Id("a").Op("*").Id(adapterName),
	).Id("Update").Params(
		Id("request").Index().Byte(),
	).Params(
		Index().Byte(),
	).BlockFunc(func(g *Group) {
		if len(core.Updates) > 0 {
			g.Id("updateRequest").Op(":=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.UpdateRequestProto).Values()
			g.Id("updateResponse").Op(":=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.UpdateResponseProto).Values()
			g.Line()

			g.Err().Op(":=").Qual("google.golang.org/protobuf/proto", "Unmarshal").Call(
				Id("request"),
				Id("updateRequest"),
			)
			g.If(
				Err().Op("!=").Nil(),
			).Block(
				Panic(Err()),
			)
			g.Line()

			g.Id("t1").Op(":=").Qual("time", "Now").Call()
			g.Line()

			g.Switch(
				Id("req").Op(":=").Id("updateRequest.Request").Assert(Type()),
			).BlockFunc(func(g *Group) {
				for _, update := range core.Updates {
					g.Case(
						Op("*").Qual(monsteraYaml.GoCode.CorePbPackage, core.UpdateRequestProto+"_"+update.Name+"Request"),
					).Block(
						List(Id("r"), Err()).Op(":=").Id("a").Dot(coreVarName).Dot(update.Name).Call(
							Id("req").Dot(update.Name+"Request"),
						),
						Qual("github.com/evrblk/monstera/x", "MeasureSince").Call(
							Id("monsteraCoreMethodDuration").Dot("WithLabelValues").Call(
								Lit(core.Name),
								Lit(update.Name),
								Id("a").Dot("shardId"),
								Id("a").Dot("replicaId"),
							),
							Id("t1"),
						),
						Id("updateResponse").Dot("Response").Op("=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.UpdateResponseProto+"_"+update.Name+"Response").Values(
							Id(update.Name+"Response").Op(":").Id("r"),
						),
						Id("updateResponse").Dot("Error").Op("=").Qual("github.com/evrblk/monstera/x", "WrapError").Call(
							Err(),
						),
					)
				}
				g.Default().Block(
					Panic(Lit("no matching handlers")),
				)
			})

			g.List(
				Id("response"),
				Err(),
			).Op(":=").Qual("google.golang.org/protobuf/proto", "Marshal").Call(
				Id("updateResponse"),
			)
			g.If(
				Err().Op("!=").Nil(),
			).Block(
				Panic(Err()),
			)
			g.Line()

			g.Return(Id("response"))
		} else {
			g.Panic(Lit("no matching handlers"))
		}
	})
	f.Line()

	// Read func
	f.Func().Params(
		Id("a").Op("*").Id(adapterName),
	).Id("Read").Params(
		Id("request").Index().Byte(),
	).Params(
		Index().Byte(),
	).BlockFunc(func(g *Group) {
		if len(core.Reads) > 0 {
			g.Id("readRequest").Op(":=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.ReadRequestProto).Values()
			g.Id("readResponse").Op(":=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.ReadResponseProto).Values()
			g.Line()

			g.Err().Op(":=").Qual("google.golang.org/protobuf/proto", "Unmarshal").Call(
				Id("request"),
				Id("readRequest"),
			)
			g.If(
				Err().Op("!=").Nil(),
			).Block(
				Panic(Err()),
			)
			g.Line()

			g.Id("t1").Op(":=").Qual("time", "Now").Call()
			g.Line()

			g.Switch(
				Id("req").Op(":=").Id("readRequest.Request").Assert(Type()),
			).BlockFunc(func(g *Group) {
				for _, read := range core.Reads {
					g.Case(
						Op("*").Qual(monsteraYaml.GoCode.CorePbPackage, core.ReadRequestProto+"_"+read.Name+"Request"),
					).Block(
						List(Id("r"), Err()).Op(":=").Id("a").Dot(coreVarName).Dot(read.Name).Call(
							Id("req").Dot(read.Name+"Request"),
						),
						Qual("github.com/evrblk/monstera/x", "MeasureSince").Call(
							Id("monsteraCoreMethodDuration").Dot("WithLabelValues").Call(
								Lit(core.Name),
								Lit(read.Name),
								Id("a").Dot("shardId"),
								Id("a").Dot("replicaId"),
							),
							Id("t1"),
						),
						Id("readResponse").Dot("Response").Op("=").Op("&").Qual(monsteraYaml.GoCode.CorePbPackage, core.ReadResponseProto+"_"+read.Name+"Response").Values(
							Id(read.Name+"Response").Op(":").Id("r"),
						),
						Id("readResponse").Dot("Error").Op("=").Qual("github.com/evrblk/monstera/x", "WrapError").Call(
							Err(),
						),
					)
				}
				g.Default().Block(
					Panic(Lit("no matching handlers")),
				)
			})

			g.List(
				Id("response"),
				Err(),
			).Op(":=").Qual("google.golang.org/protobuf/proto", "Marshal").Call(
				Id("readResponse"),
			)
			g.If(
				Err().Op("!=").Nil(),
			).Block(
				Panic(Err()),
			)
			g.Line()

			g.Return(Id("response"))
		} else {
			g.Panic(Lit("no matching handlers"))
		}
	})

	f.Line()
}
