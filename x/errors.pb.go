// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: x/errors.proto

package monsterax

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorCode int32

const (
	ErrorCode_INVALID            ErrorCode = 0
	ErrorCode_OK                 ErrorCode = 1
	ErrorCode_INVALID_ARGUMENT   ErrorCode = 2
	ErrorCode_DEADLINE_EXCEEDED  ErrorCode = 3
	ErrorCode_NOT_FOUND          ErrorCode = 4
	ErrorCode_ALREADY_EXISTS     ErrorCode = 5
	ErrorCode_RESOURCE_EXHAUSTED ErrorCode = 6
	ErrorCode_UNIMPLEMENTED      ErrorCode = 7
	ErrorCode_INTERNAL           ErrorCode = 8
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "INVALID",
		1: "OK",
		2: "INVALID_ARGUMENT",
		3: "DEADLINE_EXCEEDED",
		4: "NOT_FOUND",
		5: "ALREADY_EXISTS",
		6: "RESOURCE_EXHAUSTED",
		7: "UNIMPLEMENTED",
		8: "INTERNAL",
	}
	ErrorCode_value = map[string]int32{
		"INVALID":            0,
		"OK":                 1,
		"INVALID_ARGUMENT":   2,
		"DEADLINE_EXCEEDED":  3,
		"NOT_FOUND":          4,
		"ALREADY_EXISTS":     5,
		"RESOURCE_EXHAUSTED": 6,
		"UNIMPLEMENTED":      7,
		"INTERNAL":           8,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_x_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_x_errors_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_x_errors_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=com.evrblk.monstera.monsterax.ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Context       []*ErrorContext        `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_x_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_x_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_x_errors_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_INVALID
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetContext() []*ErrorContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type ErrorContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorContext) Reset() {
	*x = ErrorContext{}
	mi := &file_x_errors_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorContext) ProtoMessage() {}

func (x *ErrorContext) ProtoReflect() protoreflect.Message {
	mi := &file_x_errors_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorContext.ProtoReflect.Descriptor instead.
func (*ErrorContext) Descriptor() ([]byte, []int) {
	return file_x_errors_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorContext) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ErrorContext) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_x_errors_proto protoreflect.FileDescriptor

const file_x_errors_proto_rawDesc = "" +
	"\n" +
	"\x0ex/errors.proto\x12\x1dcom.evrblk.monstera.monsterax\"\xa6\x01\n" +
	"\x05Error\x12<\n" +
	"\x04code\x18\x01 \x01(\x0e2(.com.evrblk.monstera.monsterax.ErrorCodeR\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12E\n" +
	"\acontext\x18\x03 \x03(\v2+.com.evrblk.monstera.monsterax.ErrorContextR\acontext\"6\n" +
	"\fErrorContext\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value*\xa9\x01\n" +
	"\tErrorCode\x12\v\n" +
	"\aINVALID\x10\x00\x12\x06\n" +
	"\x02OK\x10\x01\x12\x14\n" +
	"\x10INVALID_ARGUMENT\x10\x02\x12\x15\n" +
	"\x11DEADLINE_EXCEEDED\x10\x03\x12\r\n" +
	"\tNOT_FOUND\x10\x04\x12\x12\n" +
	"\x0eALREADY_EXISTS\x10\x05\x12\x16\n" +
	"\x12RESOURCE_EXHAUSTED\x10\x06\x12\x11\n" +
	"\rUNIMPLEMENTED\x10\a\x12\f\n" +
	"\bINTERNAL\x10\bB(Z&github.com/evrblk/monstera/x;monsteraxb\x06proto3"

var (
	file_x_errors_proto_rawDescOnce sync.Once
	file_x_errors_proto_rawDescData []byte
)

func file_x_errors_proto_rawDescGZIP() []byte {
	file_x_errors_proto_rawDescOnce.Do(func() {
		file_x_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_x_errors_proto_rawDesc), len(file_x_errors_proto_rawDesc)))
	})
	return file_x_errors_proto_rawDescData
}

var file_x_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_x_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_x_errors_proto_goTypes = []any{
	(ErrorCode)(0),       // 0: com.evrblk.monstera.monsterax.ErrorCode
	(*Error)(nil),        // 1: com.evrblk.monstera.monsterax.Error
	(*ErrorContext)(nil), // 2: com.evrblk.monstera.monsterax.ErrorContext
}
var file_x_errors_proto_depIdxs = []int32{
	0, // 0: com.evrblk.monstera.monsterax.Error.code:type_name -> com.evrblk.monstera.monsterax.ErrorCode
	2, // 1: com.evrblk.monstera.monsterax.Error.context:type_name -> com.evrblk.monstera.monsterax.ErrorContext
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_x_errors_proto_init() }
func file_x_errors_proto_init() {
	if File_x_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_x_errors_proto_rawDesc), len(file_x_errors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_x_errors_proto_goTypes,
		DependencyIndexes: file_x_errors_proto_depIdxs,
		EnumInfos:         file_x_errors_proto_enumTypes,
		MessageInfos:      file_x_errors_proto_msgTypes,
	}.Build()
	File_x_errors_proto = out.File
	file_x_errors_proto_goTypes = nil
	file_x_errors_proto_depIdxs = nil
}
